Description: >
    Deepak Arora / Udacity 2020

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to the load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} LB Sec Group
  WebServerSecGroup:
     Type: AWS::EC2::SecurityGroup
     Properties:
       GroupDescription: Allow http to our hosts and SSH from local VPC
       VpcId:
         Fn::ImportValue:
           !Sub "${EnvironmentName}-VPCID"
       SecurityGroupIngress:
       - IpProtocol: tcp
         FromPort: 80
         ToPort: 80
         CidrIp: 0.0.0.0/0
       - IpProtocol: tcp
         FromPort: 22
         ToPort: 22
         CidrIp: 0.0.0.0/0
       SecurityGroupEgress:
       - IpProtocol: tcp
         FromPort: 0
         ToPort: 65535
         CidrIp: 0.0.0.0/0     
       Tags:
       - Key: Name
         Value: !Sub ${EnvironmentName} WebServerSecGroup
  
  # ProfileWithRolesForApp:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties:
  #     Roles:
  #       - UdacityS3ReadOnlyEC2
  S3Role:
    Type: "AWS::IAM::Role"
    Properties:
        AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: "Allow"
              Principal:
                Service:
                      - "ec2.amazonaws.com"
              Action:
                  - "sts:AssumeRole"
        ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
        Path: "/"
  RolePolicies:
      Type: "AWS::IAM::Policy"
      Properties:
          PolicyName: "root"
          PolicyDocument:
              Version: "2012-10-17"
              Statement:
              - Effect: "Allow"
                Action:
                    - "s3:Get*"
                    - "s3:List*"
                Resource: "*"
          Roles:
              - Ref: "S3Role" 
  ProfileWithRolesForApp:
      Type: AWS::IAM::InstanceProfile
      Properties: 
        Path: "/"
        Roles: 
          - Ref: "S3Role"   

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          export DEBIAN_FRONTEND=noninteractive
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          #echo "Udacity Demo Web Server Running!" > index.html
          aws s3 cp s3://udacity-nano-web/udacity-starter-website.zip .
          unzip -o udacity-starter-website.zip
      ImageId: ami-0d1cd67c26f5fca19
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: t3.small
      IamInstanceProfile:
        Ref: ProfileWithRolesForApp
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
        VPCZoneIdentifier:
        - Fn::ImportValue: 
            !Sub "${EnvironmentName}-PRIVATE-NETS"
        LaunchConfigurationName:
          Ref: WebAppLaunchConfig
        MinSize: '4'
        MaxSize: '5'
        TargetGroupARNs:
          - Ref: WebAppTargetGroup     
  WebAppLB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUBL1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUBL2-SN"
        SecurityGroups:
        - Ref: LBSecGroup
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} Web App LB  
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"    
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-005bdb005fb00e791
      #InstanceType: t2.micro
      BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: '10'
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-PUBL2-SN"
          GroupSet:
            - !Ref WebServerSecGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion Host server

Outputs: 
    WebAppLB: 
      Description: URL of Load balancer
      Value: !Join ["", ["http://", !GetAtt WebAppLB.DNSName,]]
      #Value: !Sub "http://"!GetAtt WebAppLB.DNSName
      Export:
          Name: !Sub ${EnvironmentName}-DNS-NAME

   